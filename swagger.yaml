openapi: 3.0.0
info:
  title: "Swagger Movie Actor Service"
  description: >
    This interface allows you to play with our project.
    This project is composed of 2 micro-services
    1. The movie service, that list movies and
    2. The actor service that act as a proxy to the movie service and add to the requested movie additionals infomations about actors that have played in a specific movie."
  version: "1.0.0"


externalDocs:
  url: https://github.com/IAmFrench/EFREI-M2-ST2DCCC
  description: GitHub repository of the project

tags:
- name: Actor
  description: >
    Query from our actor service
    
    
- name: Movie
  description: >
    Query from our movie service

paths:
  /findAll:
    servers:
      - url: http://localhost:81
        description: API for the Actor Service
    get:
      summary: "List all movies"
      description: >
        This method is used to get movies details, it return a list of movies
      tags:
      - Actor
      operationId: "getMoviesFromActorService"
      responses:
        "200":
          description: "200 OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movie'
        default:
          description: Unexpected error


  /findOne/{movieId}:
    servers:
      - url: http://localhost:81
        description: API for the Actor Service
    get:
      summary: "Get a movie by his movieId"
      description: ""
      tags:
      - Actor
      operationId: "getMovieFromActorService"
      parameters:
      - name: "movieId"
        in: "path"
        description: "ID of movie to display"
        required: true
        schema:
          type: integer
          format: int64
        example: 2
      - name: "delay"
        in: "query"
        schema:
          type: integer
          format: int64
        example: 600
        description: "Delay to be added to the query, if this number is over 500 (ms) the actor service will fallback to a default response"
        required: false
      responses:
        "200":
          description: "200 OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'
        default:
          description: Unexpected error
                
  /movies:
    servers:
      - url: http://localhost:82
        description: API for the Movie Service
    get:
      summary: "List all movies"
      description: >
        This method is used to get movies details, it return a list of movies
      tags:
      - Movie
      operationId: "getMoviesFromMovieService"
      responses:
        "200":
          description: "200 OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movie'
        default:
          description: Unexpected error
    post:
      summary: "Add a movie to the movie service"
      description: >
        This method is used to get movies details, it return a list of movies
      tags:
      - Movie
      operationId: "addMoviesFromMovieService"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/movie'
            example:
              name: Soul
              description: >
                A musician who has lost his passion for music is transported out of his body and must find his way back with the help of an infant soul learning about herself.
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movie'
        default:
          description: Unexpected error          
  /movies/{movieId}:
    servers:
      - url: http://localhost:82
        description: API for the Movie Service
    get:
      summary: "Get a movie by his movieId"
      description: >
        This method is used to get a specific movies, it return a movies pbject
      tags:
      - Movie
      operationId: "getMovieFromMovieService"
      parameters:
      - name: "movieId"
        in: "path"
        description: "ID of movie to display"
        required: true
        schema:
          type: integer
          format: int64
        example: 2
      responses:
        "200":
          description: "200 OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movie'
        default:
          description: Unexpected error
    put:
      summary: "Edit a movie by his movieId"
      description: >
        This method is used to edit a specific movies, it return a movies pbject
      tags:
      - Movie
      operationId: "editMovieFromMovieService"
      parameters:
      - name: "movieId"
        in: "path"
        description: "ID of movie to display"
        required: true
        schema:
          type: integer
          format: int64
        example: 1
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/movie'
            example:
              description: >
                The lives of two mob hitmen, a boxer, a gangster and his wife, and a pair of diner bandits intertwine in four tales of violence and redemption.
              
      responses:
        "204":
          description: Updated
        default:
          description: Unexpected error
    delete:
      summary: "Delete a movie by his movieId"
      description: >
        This method is used to get a specific movies, it return a movies pbject
      tags:
      - Movie
      operationId: "deleteMovieFromMovieService"
      parameters:
      - name: "movieId"
        in: "path"
        description: "ID of movie to display"
        required: true
        schema:
          type: integer
          format: int64
        example: 3
      responses:
        "200":
          description: "200 OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movie'

components:
  schemas:
    movie:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        description:
          type: "string"
        actors:
          type: "string"